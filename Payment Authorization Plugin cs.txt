using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AWE.Evolution.Plugins.Helper;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Client;

namespace AWE.Evolution.Plugins
{
    public class PaymentAuthorization : Plugin
    {
        public static string ENROLLMENT_STATUS_REASON_H0S5PAYMENTFAILURE = "HOS5 Enrollment Failure";
        public static string ENROLLMENT_STATUS_REASON_PAYMENTFAILURE = "Damaged Payment";
        public static string ENROLLMENT_STATUS_REASON_PAYMENTSUCCESS = "Saved";
       
        private string _ETSapiKey;
        private string _ETSPaymentUrl;
       
        // Common  variables for a method
        Guid _EnrollmentId = Guid.Empty;
        Money _Amount = new Money();
        DateTime? _StartDate = null;
        //Log
        private bool _IsLogEnabled;//29585

        public PaymentAuthorization()
            : base(typeof(PaymentAuthorization))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(Plugin.PluginStage.PreOperation, Plugin.PluginMessage.Create, Schema.Entity.PaymentAuthorization.EntityLogicalName, new Action<LocalPluginContext>(PreCreate)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(Plugin.PluginStage.PostOperation, Plugin.PluginMessage.Update, Schema.Entity.PaymentAuthorization.EntityLogicalName, new Action<LocalPluginContext>(PostUpdate)));
        }

        #region EventTriggeringMethods
        public void PreCreate(LocalPluginContext localContext)
        {
            IOrganizationService service;
            evo_paymentauthorization target;
            evo_paymentauthorization postImage;
            ITracingService tracingSvc;

           service= InitFromContext(localContext,out target,out postImage,out tracingSvc);
           ProcessETSPayment(target,service,tracingSvc);
        }

        public void PostUpdate(LocalPluginContext localContext)
        {
            IOrganizationService service;
            ITracingService tracingSvc;
            evo_paymentauthorization target;
            evo_paymentauthorization postImage;
            string recurringPaymentResponse = string.Empty;
            EntityReference entRefEnrollment = null;
            EntityReference entRefETSPaymentMethod = null;
            EntityReference entRefProgram = null;
            string entRefName = null;
            string programCode = string.Empty;
            Money totalAmount = new Money();
            Money enrAmount = new Money();
            Money taxAmount = new Money();
            DateTime? startDate = null;
            OptionSetValue paymentMethod = null;
            OptionSetValue paymentFrequency = null;
            string paymentInstrumentRef = string.Empty;
            int? frequency = null;
            string etsPaymentPlanId = string.Empty;
            DateTime? paymentAuthChargeDate = null;

            service = InitFromContext(localContext, out target, out postImage,out tracingSvc);

            //Plugin will trigger only when Evo_IsRPINeeded field is updated  
            if (!target.Contains("evo_triggerrpi") || !(bool)target["evo_triggerrpi"])
                return;
            if (localContext.PluginExecutionContext.Depth>1)
                return;            

            if (postImage != null)
            {
                // instantiate with postImage if possible first.                
                entRefEnrollment = postImage.evo_enrollmentid;
                entRefETSPaymentMethod = postImage.evo_ETSPaymentMethodId;
                paymentFrequency = postImage.evo_FrequencyofPayment;
                paymentMethod = postImage.evo_PaymentMethod;
                etsPaymentPlanId = postImage.evo_ETSPaymentPlanID;
                paymentAuthChargeDate = postImage.evo_ChargeDate;
                entRefProgram = postImage.evo_programid;
                entRefName = postImage.evo_name;
            }
            else
            {
                target = service.Retrieve(target.LogicalName, target.Id, new ColumnSet("evo_name","evo_enrollmentid", "evo_total", "evo_etspaymentmethodid", "evo_frequencyofpayment", "evo_paymentmethod","evo_etspaymentplanid","evo_chargedate","evo_programid")).ToEntity<evo_paymentauthorization>();//retrieve name to pass for log record creation . 29585.

                if (target.Contains("evo_enrollmentid"))
                    entRefEnrollment = (EntityReference)target["evo_enrollmentid"];                
                if (target.Contains("evo_etspaymentmethodid"))
                    entRefETSPaymentMethod = (EntityReference)target["evo_etspaymentmethodid"];
                if (target.Contains("evo_frequencyofpayment"))
                    paymentFrequency = (OptionSetValue)target["evo_frequencyofpayment"];
                if (target.Contains("evo_paymentmethod"))
                    paymentMethod = (OptionSetValue)target["evo_paymentmethod"];
                if (target.Contains("evo_etspaymentplanid"))
                    etsPaymentPlanId = target.evo_ETSPaymentPlanID;
                if (target.Contains("evo_chargedate"))
                    paymentAuthChargeDate = (DateTime)target.evo_ChargeDate;
                if (target.Contains("evo_programid"))
                    entRefProgram = (EntityReference)target["evo_programid"];
                if (target.Contains("evo_name"))
                    entRefName = target.evo_name;

            }
           
            if (paymentMethod == null)
            {
                tracingSvc.Trace("Payment Method is missing.");
                PluginErrorHandler.ShowBusinessProcessError("Payment method is missing");
                return;
            }
            if (paymentFrequency == null)
            {
                tracingSvc.Trace("Payment Frequency is missing");
                PluginErrorHandler.ShowBusinessProcessError("Payment frequency is missing");
                return;
            }
            if(paymentAuthChargeDate==null)
            {
                tracingSvc.Trace("Charge date is missing in Payment Authorization");
                PluginErrorHandler.ShowBusinessProcessError("Charge date is missing in Payment Authorization.");
                return;
            }

            if (paymentMethod.Value != (int)OptionSets.evo_paymentmethod.ACH &&
                paymentMethod.Value != (int)OptionSets.evo_paymentmethod.CreditCard
                )
            {
                tracingSvc.Trace("Payment Method is not ACH/CreditCard, hence can not schedule payment.");
                PluginErrorHandler.ShowBusinessProcessError("Payment method is not ACH/Credit Card");
                return;
            }

            if(string.IsNullOrEmpty(etsPaymentPlanId))
            {
                PluginErrorHandler.ShowBusinessProcessError("ETS payment plan id is missing");
                return;
            }

            if (entRefETSPaymentMethod == null)
            {
                tracingSvc.Trace("ETS payment method record is missing.");
                PluginErrorHandler.ShowBusinessProcessError("ETS payment method record is missing");
                return;
            }
            else
            {

                Entity entEtsPaymentMethod = service.Retrieve(entRefETSPaymentMethod.LogicalName, entRefETSPaymentMethod.Id, new ColumnSet("evo_etspaymentid"));
                if (entEtsPaymentMethod.Contains("evo_etspaymentid"))
                    paymentInstrumentRef = entEtsPaymentMethod["evo_etspaymentid"].ToString();
            }

            if (entRefProgram == null)
            {
                tracingSvc.Trace("Program record is missing.");
                PluginErrorHandler.ShowBusinessProcessError("Program record is missing.");
                return;
            }
            else
            {

                Entity entProgram = service.Retrieve(entRefProgram.LogicalName, entRefProgram.Id, new ColumnSet("evo_programcode"));
                if (entProgram.Contains("evo_programcode"))
                {
                    programCode = entProgram["evo_programcode"].ToString();
                }
                else
                {
                    tracingSvc.Trace("Program code is missing.");
                    PluginErrorHandler.ShowBusinessProcessError("Program code is missing.");
                    return;

                }
            }

            evo_enrollment entEnrollment = service.Retrieve(evo_enrollment.EntityLogicalName, entRefEnrollment.Id, new ColumnSet("evo_eligibledate","evo_enrollmentprice","evo_tax","evo_total")).ToEntity<evo_enrollment>();

            if (entEnrollment.Contains("evo_eligibledate") && entEnrollment["evo_eligibledate"] != null)
                startDate = (DateTime)entEnrollment["evo_eligibledate"];
            else
                PluginErrorHandler.ShowBusinessProcessError("Start date is missing in Enrollment");
            if (entEnrollment.Contains("evo_tax"))
                taxAmount =(Money) entEnrollment["evo_tax"];
            if (entEnrollment.Contains("evo_enrollmentprice"))
                enrAmount = (Money)entEnrollment["evo_enrollmentprice"];
            if (entEnrollment.Contains("evo_total"))
                totalAmount = (Money)entEnrollment["evo_total"];


            switch (paymentFrequency.Value)
            {
                case (int)OptionSets.evo_paymentfrequency.Annually:
                    frequency = 1;
                    break;
                case (int)OptionSets.evo_paymentfrequency.BiMonthly:
                    frequency = 6;
                    break;
                case (int)OptionSets.evo_paymentfrequency.Monthly:
                    frequency = 12;
                    break;
                case (int)OptionSets.evo_paymentfrequency.Quarterly:
                    frequency = 4;
                    break;

            }
            if (frequency == null)
                PluginErrorHandler.ShowBusinessProcessError("Payment Frequency is not valid for ETS payment");
            if (string.IsNullOrEmpty(paymentInstrumentRef))
                PluginErrorHandler.ShowBusinessProcessError("ETS instrument is missing in Payment Authorization");

            DateTime nextChargeDate = CalculateNextChargeDate((DateTime)paymentAuthChargeDate, (int) frequency);

            VoidPaymentPlan(etsPaymentPlanId,tracingSvc,service,entRefName);//pass service and name to create log record. 29585.
            recurringPaymentResponse = CreateNewPlan(paymentInstrumentRef, totalAmount, nextChargeDate, (int) frequency,tracingSvc, programCode);

            if (string.IsNullOrEmpty(recurringPaymentResponse))
            {
                PluginErrorHandler.ShowBusinessProcessError("ETS create plan web service call failure");
            }
            else
            {
                //Update PA
                target.evo_ETSPaymentPlanID = recurringPaymentResponse;
                target["evo_triggerrpi"] = false;
                target["evo_rpitimestamp"] = DateTime.UtcNow;
                target["evo_tax"] = taxAmount;
                target["evo_total"] = totalAmount;
                target["evo_enrollmentprice"] = enrAmount;
                target["evo_chargedate"] = nextChargeDate;
                service.Update(target);

                evo_enrollment enrollmentEntity = new evo_enrollment
                {
                    Id = entRefEnrollment.Id,
                    evo_PaymentPlanID = recurringPaymentResponse,
                    evo_ChargeDate=nextChargeDate

                };
                service.Update(enrollmentEntity);
            }
        }
        #endregion
        /// <summary>
        /// Method to Iniitialize Context
        /// </summary>
        /// <param name="localContext"></param>
        public IOrganizationService InitFromContext(LocalPluginContext localContext,out evo_paymentauthorization target,out evo_paymentauthorization postImage,out ITracingService tracingSvc)
        {            
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            IPluginExecutionContext pluginContext = localContext.PluginExecutionContext;
           IOrganizationService service = localContext.OrganizationService;
            tracingSvc = (ITracingService)localContext.TracingService;
            _ETSapiKey = localContext.ETSApiKey;
            _ETSPaymentUrl = localContext.ETS_V3_ServiceURL;
            _IsLogEnabled = Convert.ToBoolean(localContext.IsLoggingEnabled);//29585.
            if (localContext == null)
                throw new Exception("No plugin context present");

            if (!(pluginContext.InputParameters["Target"] is Entity))
                throw new Exception(string.Format("The context record is not the [{0}] entity as expected, exiting", evo_paymentauthorization.EntityLogicalName));

            Entity Entitytarget = (Entity)pluginContext.InputParameters["Target"];
            tracingSvc.Trace("Checked Target is of Type Entity");

            if (Entitytarget == null || Entitytarget.LogicalName != evo_paymentauthorization.EntityLogicalName)
                throw new Exception(string.Format("The context record is not the [{0}] entity as expected, exiting", evo_paymentauthorization.EntityLogicalName));

            if (string.IsNullOrEmpty(_ETSapiKey) || string.IsNullOrEmpty(_ETSPaymentUrl))
                throw new Exception(string.Format("The context can not authenticate ETS, exiting", evo_paymentauthorization.EntityLogicalName));

             target = Entitytarget.ToEntity<evo_paymentauthorization>();
             postImage = pluginContext.PostEntityImages.Count > 0 ? pluginContext.PostEntityImages.Values.FirstOrDefault().ToEntity<evo_paymentauthorization>() : null;
            
             return service;
        }

        /// <summary>
        /// Method to call ETS Payment for ACH
        /// </summary>
        private void ProcessETSPayment(evo_paymentauthorization target,IOrganizationService service,ITracingService tracingSvc)
        {
            string recurringPaymentResponse = string.Empty;
            string programCode = string.Empty;
            try
            {
                tracingSvc.Trace("Execution Started : {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);


                if (!target.Contains("evo_contactid") || target.evo_contactid == null)
                {
                    tracingSvc.Trace("Missing Customer in target.");
                    return;
                }
                if (!target.Contains("evo_enrollmentid") || target.evo_enrollmentid == null)
                {
                    tracingSvc.Trace("Missing Enrollment in target.");
                    return;
                }
                if (!target.Contains("evo_accountnumber") || string.IsNullOrEmpty(target.evo_AccountNumber))
                {
                    tracingSvc.Trace("Missing Account Number for the customer, hence payment can not be processed.");
                    return;
                }
                if (!target.Contains("evo_routingnumber") || string.IsNullOrEmpty(target.evo_RoutingNumber))
                {
                    tracingSvc.Trace("Missing Routing Number for the customer, hence payment can not be processed.");
                    return;
                }
                if (!target.Contains("evo_total") || target.evo_Total == null || target.evo_Total.Value == 0.0M)
                {
                    tracingSvc.Trace("Amount is missing, hence payment can not be processed.");
                    return;
                }
                if (!target.Contains("evo_chargedate") || target.evo_ChargeDate == null)
                {
                    tracingSvc.Trace("Charge Date is missing.");
                    return;
                }
                if (!target.Contains("evo_paymenttype") || target.evo_PaymentType == null)
                {
                    tracingSvc.Trace("Payment Type is missing.");
                    return;
                }
                if (!target.Contains("evo_paymentmethod") || target.evo_PaymentMethod == null)
                {
                    tracingSvc.Trace("Payment Method is missing.");
                    return;
                }
                if (target.evo_PaymentType.Value != (int)OptionSets.evo_paymentauthorizationevo_PaymentType.Charge)
                {
                    tracingSvc.Trace("Payment Type is not charge, hence can not process payment.");
                    return;
                }
                if (target.evo_PaymentMethod.Value != (int)OptionSets.evo_paymentmethod.ACH)
                {
                    tracingSvc.Trace("Payment Method is not ACH, hence can not schedule payment.");
                    return;
                }

                string last4AccountNumber = !string.IsNullOrEmpty(target.evo_AccountNumber) && target.evo_AccountNumber.Length > 4 ? target.evo_AccountNumber.Substring(target.evo_AccountNumber.Length - 4, 4) : target.evo_AccountNumber;
                _EnrollmentId = target.evo_enrollmentid.Id;
                _StartDate = target.evo_ChargeDate;
                _Amount = target.evo_Total;

                // Checking PaymentInstrumentRef for customer in Payment Method entity
                using (var svc = new EvolutionServiceContext(service))
                {
                    svc.MergeOption = MergeOption.NoTracking;

                    //Checking related enrollment of PaymentAuthorization, if EnrollmentStatus is 'ProblemEnrollment' then don't send Payment information to the ETS.
                    var enrollmentCodeRecord = svc.evo_enrollmentSet
                       .Where(x => x.Id == _EnrollmentId)
                       .Select(x => new evo_enrollment
                       {
                           evo_EnrollmentStatus = x.evo_EnrollmentStatus,
                           evo_contactnumber = x.evo_contactnumber
                           
                       }).FirstOrDefault();
                    Entity entProgram = service.Retrieve(evo_program.EntityLogicalName, target.evo_programid.Id, new ColumnSet("evo_programcode"));
                    
                    if (entProgram.Contains("evo_programcode"))
                    {
                        programCode = entProgram["evo_programcode"].ToString();
                    }
                    else
                    {
                        
                        throw new Exception(String.Format("Program code is missing."));
                       

                   }
                    if (enrollmentCodeRecord.evo_EnrollmentStatus.Value == (int)OptionSets.evo_enrollmentstatus.ProblemEnrollment)
                    {
                        return;
                    }
                    if (string.IsNullOrEmpty(enrollmentCodeRecord.evo_contactnumber))
                    {
                        throw new Exception(String.Format("Customer Number is empty in Enrollment."));
                        
                    }
                    var paymentMethodRef = (from paymentMthd in svc.evo_paymentmethodsSet
                                            where paymentMthd.evo_Customer.Id == target.evo_contactid.Id
                                            && paymentMthd.evo_Accounttype.Value == target.evo_PaymentMethod.Value
                                            && paymentMthd.evo_Lastfourdigits == last4AccountNumber
                                            && paymentMthd.evo_RoutingNumber == target.evo_RoutingNumber
                                            select paymentMthd).FirstOrDefault();

                    
                    // If Payment Plan ID exists then using the same for PaymentInstrumentRef and call the ETS recurring payment                   
                    if (paymentMethodRef != null && !string.IsNullOrEmpty(paymentMethodRef.evo_ETSPaymentID))
                    {
                        tracingSvc.Trace("Scheduling recurring payment for PaymentInstrumentRef : {0}", paymentMethodRef.evo_ETSPaymentID.ToString());
                        recurringPaymentResponse = ScheduleRecurringPayment(paymentMethodRef.evo_ETSPaymentID,tracingSvc,programCode);
                    }
                    else
                    {
                        // If Payment Plan Id does not exist, then creating Payment Instrument Ref and then call ETS recurring payment
                        string paymentInstrumenRef = CreatePaymentInstrumentRef(target.evo_RoutingNumber, target.evo_AccountNumber, svc, target.evo_contactid.Id, tracingSvc, enrollmentCodeRecord.evo_contactnumber);

                        if (!string.IsNullOrEmpty(paymentInstrumenRef))
                        {
                            // Create the payment instrument
                            var paymentMethodId = service.Create(new evo_paymentmethods
                            {
                                evo_name = string.Format("{0}{1}", OptionSets.evo_paymentmethod.ACH, last4AccountNumber),
                                evo_Customer = new EntityReference(Contact.EntityLogicalName, target.evo_contactid.Id),
                                evo_Accounttype = new OptionSetValue(target.evo_PaymentMethod.Value),
                                evo_Lastfourdigits = last4AccountNumber,
                                evo_RoutingNumber = target.evo_RoutingNumber,
                                evo_ETSPaymentID = paymentInstrumenRef
                            });

                            // update payment authorization record.
                            target.evo_ETSPaymentMethodId = new EntityReference(evo_paymentmethods.EntityLogicalName, paymentMethodId);
                            target.evo_AccountNumber = string.Empty;

                            tracingSvc.Trace("Scheduling recurring payment for PaymentInstrumentRef : {0}", paymentInstrumenRef);
                            recurringPaymentResponse = ScheduleRecurringPayment(paymentInstrumenRef,tracingSvc,programCode);
                        }
                    }

                    // Update the Enrollment Status
                    if (!string.IsNullOrEmpty(recurringPaymentResponse))
                    {
                        // Successful transaction
                        target.evo_ETSPaymentPlanID = recurringPaymentResponse;
                        target.evo_AuthorizationStatus = new OptionSetValue((int)OptionSets.evo_paymentauthorizationevo_AuthorizationStatus.Authorized);
                        tracingSvc.Trace("Payment successful and scheduled with Payment Plan Id : {0} for Enrollment : {1}", recurringPaymentResponse, _EnrollmentId.ToString());
                        UpdateEnrollmentStatus(recurringPaymentResponse, null, svc,service,target,tracingSvc);
                    }
                    else
                    {
                        target.evo_AuthorizationStatus = new OptionSetValue((int)OptionSets.evo_paymentauthorizationevo_AuthorizationStatus.Declined);
                        // Failed transaction
                        tracingSvc.Trace("Payment unsuccessful for Enrollment Id : {0}", _EnrollmentId.ToString());
                        UpdateEnrollmentStatus(recurringPaymentResponse, ENROLLMENT_STATUS_REASON_PAYMENTFAILURE, svc,service,target,tracingSvc);
                    }
                }
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw PluginErrorHandler.FormatMainMethodException<InvalidPluginExecutionException>(invalidPluginExecutionException, ErrorCodes.RecordCreation, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
            catch (Exception exception)
            {
                throw PluginErrorHandler.FormatMainMethodException(exception, ErrorCodes.RecordCreation, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
            tracingSvc.Trace("Ended: {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);
        }

        /// <summary>
        /// Method to schedule recurring payment for a give PaymentInstrumentRef
        /// </summary>
        /// <param name="paymentInstrumentRef"></param>
        /// <returns></returns>
        private string ScheduleRecurringPayment(string paymentInstrumentRef,ITracingService tracingSvc,string programCode)
        {
            string recurringPaymentResponse = string.Empty;

            try
            {
                tracingSvc.Trace("Execution Started : {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);

                using (ETSPaymentHelper paymentHelper = new ETSPaymentHelper(_ETSapiKey, _ETSPaymentUrl))
                {
                    // Passing 12 for number of payments because it is ACH
                    recurringPaymentResponse = paymentHelper.ScheduleRecurringPayment(
                        programCode,
                        paymentInstrumentRef,
                        (float)_Amount.Value,
                        _StartDate.Value, 12, 12,
                        Guid.NewGuid().ToString());

                }
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw PluginErrorHandler.FormatMainMethodException<InvalidPluginExecutionException>(invalidPluginExecutionException, ErrorCodes.ScheduleRecurringPayment, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
            catch (Exception exception)
            {
                throw PluginErrorHandler.FormatMainMethodException(exception, ErrorCodes.ScheduleRecurringPayment, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

            tracingSvc.Trace("Ended: {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);

            return recurringPaymentResponse;
        }

        /// <summary>
        /// Method to create PaymentInstrumentRef using Routing and Account Numbers
        /// </summary>
        /// <param name="routingNumber"></param>
        /// <param name="accountNumber"></param>
        /// <param name="svc"></param>
        /// <param name="contactId"></param>
        /// <returns></returns>
        private string CreatePaymentInstrumentRef(string routingNumber, string accountNumber, EvolutionServiceContext svc, Guid contactId,ITracingService tracingSvc,String _correlationId)
        {

            string customerName = string.Empty;
            BillingAddress billingAddress = new BillingAddress();
            string paymentInstrumentRefResponse = string.Empty;
            try
            {
                tracingSvc.Trace("Ended: {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);

                using (ETSPaymentHelper paymentHelper = new ETSPaymentHelper(_ETSapiKey, _ETSPaymentUrl))
                {

                    // As Payment Type is ACH, It will have only Account Number and Routing Number
                    CardProperties properties = new CardProperties();
                    properties.RoutingNumber = routingNumber;
                    properties.AccountNumber = accountNumber;
                    properties.cardNumber = string.Empty;
                    properties.cvv = string.Empty;
                    properties.expirationDate = string.Empty;
                    properties.nameOnCard = string.Empty;

                    // Creating Address object which needs to be passed in CreatePaymentInstrumenRef method  
                    svc.MergeOption = MergeOption.NoTracking;
                    var customerRef = svc.ContactSet
                         .Where(x => x.ContactId.Value == contactId)
                         .Select(x => new Contact
                         {
                             FirstName = x.FullName,
                             Address2_Line1 = x.Address2_Line1,
                             Address2_Line2 = x.Address2_Line2,
                             Address2_City = x.Address2_City,
                             evo_BillingZipPostalCode = x.evo_BillingZipPostalCode,
                             evo_billingstateid = x.evo_billingstateid
                         }).FirstOrDefault();

                    if (customerRef != null)
                    {
                        customerName = customerRef.FirstName;
                        billingAddress.addressLine1 = !string.IsNullOrEmpty(customerRef.Address2_Line1) ? customerRef.Address2_Line1 : string.Empty;
                        billingAddress.addressLine2 = !string.IsNullOrEmpty(customerRef.Address2_Line2) ? customerRef.Address2_Line2 : string.Empty;
                        billingAddress.city = !string.IsNullOrEmpty(customerRef.Address2_City) ? customerRef.Address2_City : string.Empty;

                        if (customerRef.evo_BillingZipPostalCode != null)
                        {
                            var zipcodeRef = svc.evo_zipcodeSet.Where(x => x.evo_zipcodeId.Value == customerRef.evo_BillingZipPostalCode.Id).Select(x => new evo_zipcode { evo_name = x.evo_name }).FirstOrDefault();
                            if (zipcodeRef != null && !string.IsNullOrEmpty(zipcodeRef.evo_name))
                                billingAddress.postalCode = zipcodeRef.evo_name;
                        }
                        else
                        {
                            billingAddress.postalCode = string.Empty;
                        }
                        if (customerRef.evo_billingstateid != null)
                        {
                            OptionSets.evo_state customerState = (OptionSets.evo_state)customerRef.evo_billingstateid.Value;
                            billingAddress.state = customerState.ToString();
                        }
                        else
                        {
                            billingAddress.state = string.Empty;
                        }
                    }

                    paymentInstrumentRefResponse = paymentHelper.CreateETS_ACHPaymentInstrument(customerName, properties, billingAddress, Guid.NewGuid().ToString(), _correlationId);

                }
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw PluginErrorHandler.FormatMainMethodException<InvalidPluginExecutionException>(invalidPluginExecutionException, ErrorCodes.CreatePaymentInstrument, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
            catch (Exception exception)
            {
                throw PluginErrorHandler.FormatMainMethodException(exception, ErrorCodes.CreatePaymentInstrument, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

            tracingSvc.Trace("Ended: {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);

            return paymentInstrumentRefResponse;
        }

        /// <summary>
        /// Method to update Enrollment Status according to Success or Failure
        /// </summary>
        /// <param name="paymentPlanId"></param>
        /// <param name="enrollmentStatusReasonName"></param>
        /// <param name="svc"></param>
        private void UpdateEnrollmentStatus(string paymentPlanId, string enrollmentStatusReasonName, EvolutionServiceContext svc, IOrganizationService service, evo_paymentauthorization target, ITracingService tracingSvc)
        {
            try
            {
                tracingSvc.Trace("Ended: {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);

                svc.MergeOption = MergeOption.NoTracking;
                evo_enrollment enrollmentEntity = new evo_enrollment
                {
                    Id = _EnrollmentId,
                    evo_PaymentPlanID = !string.IsNullOrEmpty(paymentPlanId) ? paymentPlanId : null,
                    evo_PlanID = target.Id.ToString()
                };

                if (!string.IsNullOrEmpty(enrollmentStatusReasonName))
                {
                    var enrollmentStatusReasonRef = svc.evo_enrollmentstatusreasonSet
                        .Where(x => x.evo_name == enrollmentStatusReasonName)
                        .Select(x => new evo_enrollmentstatusreason { evo_enrollmentstatusreasonId = x.evo_enrollmentstatusreasonId })
                        .FirstOrDefault();

                    if (enrollmentStatusReasonName == ENROLLMENT_STATUS_REASON_PAYMENTFAILURE)
                    {
                        // Update Enrollment Status on Failure
                        enrollmentEntity.evo_EnrollmentStatus = new OptionSetValue((int)OptionSets.evo_enrollmentstatus.ProblemEnrollment);
                    }

                    if (enrollmentStatusReasonRef != null && enrollmentStatusReasonRef.Id != null)
                    {
                        enrollmentEntity.evo_enrollmentstatreasonid = new EntityReference(evo_enrollmentstatusreason.EntityLogicalName, enrollmentStatusReasonRef.Id);
                    }
                }

                service.Update(enrollmentEntity);
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw PluginErrorHandler.FormatMainMethodException<InvalidPluginExecutionException>(invalidPluginExecutionException, ErrorCodes.UpdateEnrollmentStatus, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
            catch (Exception exception)
            {
                throw PluginErrorHandler.FormatMainMethodException(exception, ErrorCodes.UpdateEnrollmentStatus, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
            tracingSvc.Trace("Ended: {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);
        }

       /// <summary>
       /// Method to void the plan
       /// </summary>
        private void VoidPaymentPlan(string etsPaymentPlanId, ITracingService tracingSvc,IOrganizationService service,string name)//pass service and name to create log added as part of 29585.
        {
            try
            {

                using (ETSPaymentHelper paymentHelper = new ETSPaymentHelper(_ETSapiKey, _ETSPaymentUrl))
                {
                    if (!string.IsNullOrEmpty(etsPaymentPlanId))
                    {
                        #region Void/Stop Payment Plans
                        tracingSvc.Trace("Request to 'Void' future Scheduled Payments from ETS Payment Service");
                        string cancelPayementResponse = paymentHelper.VoidPaymentPlan(etsPaymentPlanId, name, service,_IsLogEnabled);//pass service and name to create log added as part of 29585.

                        if (string.IsNullOrEmpty(cancelPayementResponse))
                        {
                            tracingSvc.Trace("Response from ETS 'Void' failed - the value returned is blank");
                            PluginErrorHandler.ShowBusinessProcessError("ETS void web service call failure");
                        }
                        #endregion
                    }
                    else
                    {
                        tracingSvc.Trace("Invalid plan id/ missing plan id");
                        PluginErrorHandler.ShowBusinessProcessError("ETS Plan is missing in Payment Authorization" );
                    }
                }
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw PluginErrorHandler.FormatMainMethodException<InvalidPluginExecutionException>(invalidPluginExecutionException, ErrorCodes.ScheduleRecurringPayment, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }

        }

        private string CreateNewPlan(string paymentInstrumentRef, Money amount, DateTime startDate, int frequency, ITracingService tracingSvc, string programCode)
        {
            string recurringPaymentResponse = null;
                      
          try
            {               

                tracingSvc.Trace("Execution Started : {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);

                using (ETSPaymentHelper paymentHelper = new ETSPaymentHelper(_ETSapiKey, _ETSPaymentUrl))
                {

                    recurringPaymentResponse = paymentHelper.ScheduleNeverExpiresRecurringPayment(
                        programCode,
                        paymentInstrumentRef,
                        (float)amount.Value,
                        startDate, frequency);                  

                }
                tracingSvc.Trace("Ended: {0}", System.Reflection.MethodBase.GetCurrentMethod().Name);
                return recurringPaymentResponse;
            }
            catch (InvalidPluginExecutionException invalidPluginExecutionException)
            {
                throw PluginErrorHandler.FormatMainMethodException<InvalidPluginExecutionException>(invalidPluginExecutionException, ErrorCodes.ScheduleRecurringPayment, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }
            catch (Exception exception)
            {
                throw PluginErrorHandler.FormatMainMethodException(exception, ErrorCodes.ScheduleRecurringPayment, GetType().FullName, System.Reflection.MethodBase.GetCurrentMethod().Name);
            }            
        }

        public  DateTime CalculateNextChargeDate(DateTime previousChargeDate, int frequency)
        {
            int currentYear = DateTime.Now.Year;
            int currentMonth = DateTime.Now.Month;
            int daysInCurrentMonth = DateTime.DaysInMonth(currentYear, currentMonth);
            int daysInPreviousDateMonth = DateTime.DaysInMonth(previousChargeDate.Year, previousChargeDate.Month);

            DateTime newDate = new DateTime();
            int day = previousChargeDate.Day;
            int month = previousChargeDate.Month;

            switch (frequency)
            {
                //Monthly Payment
                case 12:
                    newDate = new DateTime(currentYear, month, day == daysInPreviousDateMonth ? (daysInCurrentMonth > daysInPreviousDateMonth ? daysInPreviousDateMonth : daysInCurrentMonth) : day <= daysInCurrentMonth ? day : daysInCurrentMonth);

                while(newDate<=new DateTime(DateTime.Now.Year,DateTime.Now.Month,DateTime.Now.Day))
                    newDate=newDate.AddMonths(1);
                if (day == daysInPreviousDateMonth)
                  newDate=new DateTime(newDate.Year,newDate.Month, DateTime.DaysInMonth(newDate.Year,newDate.Month));

                    break;

                //Quaterly
                case 4:

                    newDate = new DateTime(currentYear, month, day == daysInPreviousDateMonth ? (daysInCurrentMonth > daysInPreviousDateMonth ? daysInPreviousDateMonth : daysInCurrentMonth) : day <= daysInCurrentMonth ? day : daysInCurrentMonth);
                 while(newDate<=new DateTime(DateTime.Now.Year,DateTime.Now.Month,DateTime.Now.Day))
                  newDate=newDate.AddMonths(3);

                 if (day == daysInPreviousDateMonth)
                  newDate=new DateTime(newDate.Year,newDate.Month, DateTime.DaysInMonth(newDate.Year,newDate.Month));
                    break;

                //Bi-Monthly
                case 6:
                    newDate = new DateTime(currentYear, month, day == daysInPreviousDateMonth ? (daysInCurrentMonth > daysInPreviousDateMonth ? daysInPreviousDateMonth : daysInCurrentMonth) : day <= daysInCurrentMonth ? day : daysInCurrentMonth);

                    while (newDate <= new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))
                        newDate = newDate.AddMonths(2);
                    if (day == daysInPreviousDateMonth)
                        newDate = new DateTime(newDate.Year, newDate.Month,DateTime.DaysInMonth(newDate.Year, newDate.Month));

                    break;

                //Annually
                case 1:
                    newDate = new DateTime(currentYear, month, day == daysInPreviousDateMonth ? (daysInCurrentMonth > daysInPreviousDateMonth ? daysInPreviousDateMonth : daysInCurrentMonth) : day <= daysInCurrentMonth ? day : daysInCurrentMonth);

                    while(newDate<=new DateTime(DateTime.Now.Year,DateTime.Now.Month,DateTime.Now.Day))
                    newDate=newDate.AddYears(1);
                    if (day == daysInPreviousDateMonth)
                    newDate=new DateTime(newDate.Year,newDate.Month,DateTime.DaysInMonth(newDate.Year,newDate.Month));
                    break;
             
            }
            return newDate;
        }

    }
}
